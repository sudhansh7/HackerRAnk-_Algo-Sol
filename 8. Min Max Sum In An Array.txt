https://www.hackerrank.com/challenges/mini-max-sum/problem?h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen


#include <bits/stdc++.h>

using namespace std;

vector<string> split_string(string);
vector<int> sort(vector<int>);
vector<int> swap(vector<int>, int);

// Complete the miniMaxSum function below.
void miniMaxSum(vector<int> arr) 
{
    long int min=0, max=0, i;
    vector<int> a(5);
    a = sort(arr);
    // for(i=0;i<5;i++)
    // {
    //     cout<< a[i]<<" ";
    // }

    for(i=0;i<=3;i++)
    {
        min = min+a[i]; 
    }
    for(i=1;i<=4;i++)
    {
        max = max+a[i]; 
    }
    cout<<min<<" "<<max;
    

}
vector<int> swap(vector<int> ar, int i)
{
    int temp;
    temp = ar[i];
    ar[i] = ar[i+1];
    ar[i+1] = temp;
    return ar;
}

vector<int> sort(vector<int> ar)
{
    int i, j;
    for(i=0;i<4;i++)
    {
        for(j=0;j<4;j++)
        {
            if(ar[j] > ar[j+1])
            {
                ar = swap(ar, j);
            }
        }  
    }
    return (ar);
}

int main()
{
    string arr_temp_temp;
    getline(cin, arr_temp_temp);

    vector<string> arr_temp = split_string(arr_temp_temp);

    vector<int> arr(5);

    for (int i = 0; i < 5; i++) {
        int arr_item = stoi(arr_temp[i]);

        arr[i] = arr_item;
    }

    miniMaxSum(arr);

    return 0;
}

vector<string> split_string(string input_string) {
    string::iterator new_end = unique(input_string.begin(), input_string.end(), [] (const char &x, const char &y) {
        return x == y and x == ' ';
    });

    input_string.erase(new_end, input_string.end());

    while (input_string[input_string.length() - 1] == ' ') {
        input_string.pop_back();
    }

    vector<string> splits;
    char delimiter = ' ';

    size_t i = 0;
    size_t pos = input_string.find(delimiter);

    while (pos != string::npos) {
        splits.push_back(input_string.substr(i, pos - i));

        i = pos + 1;
        pos = input_string.find(delimiter, i);
    }

    splits.push_back(input_string.substr(i, min(pos, input_string.length()) - i + 1));

    return splits;
}
